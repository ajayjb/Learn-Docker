Docker Compose Tutorial for Beginners â€“ Notes

1. Introduction to Docker Compose
Docker Compose simplifies the management of multi-container applications.
Uses a docker-compose.yml file to define services, networks, and volumes.
Helps manage multiple containers with a single command (docker-compose up).

Docker Networking:
    To check network: docker network ls
    To inspect: docker inspect [Network Name] 
                ex: docker inspect bridge

when we inspect we can see its subnet and getway ip of driver.

There are many types of Networking mostly used bridge (We can create our own bridge and attache to 
container then we can use container name to access the othe container using HTTP request.)

## Docker Networking & Common Commands (Cheat Sheet)

---

### 1. Docker Networking Overview
Docker provides different types of networks to enable communication between containers, the host machine, and external networks.

#### Default Docker Networks (`docker network ls`)
- **bridge**: Default network for containers. Containers can communicate only if they are on the same bridge network.
- **host**: Removes network isolation, allowing the container to use the host's network. No need for port mapping (`-p`).
- **none**: Completely disables networking.
- **overlay**: Used in Docker Swarm for multi-host container networking.
- **macvlan**: Assigns a MAC address to the container, making it appear as a physical device on the network.

#### Common Networking Commands
- List networks:
  docker network ls

- Create a custom network:
  docker network create my-custom-net

- Inspect a network:
  docker network inspect my-custom-net

- Connect a running container to a network:
  docker network connect my-custom-net my-container

- Disconnect a container from a network:
  docker network disconnect my-custom-net my-container

- Remove a network:
  docker network rm my-custom-net


---

### 2. Example: Running Containers in a Custom Networ
# Create a custom network
docker network create my-net

# Run two containers in the same network
docker run -d --name app --network my-net nginx
docker run -d --name db --network my-net mysql

# Now 'app' and 'db' can communicate using container names (DNS resolution)

---

### 3. Most Used Docker Commands & Flags

#### Basic Commands
- Show running containers:
  docker ps

- Show all containers (including stopped ones):
  docker ps -a

- List all Docker images:
  docker images

- Remove a container:
  docker rm <container>

- Remove an image:
  docker rmi <image>

- Stop a running container:
  docker stop <container>

- Start a stopped container:
  docker start <container>


#### Important Docker Run Flags
| Flag | Description | Example |
|------|-------------|---------|
| `--name` | Assign a name to the container. | `docker run --name my-container ubuntu` |
| `--rm` | Automatically remove the container when it stops. | `docker run --rm ubuntu` |
| `-d` | Run the container in detached (background) mode. | `docker run -d nginx` |
| `-e` | Set environment variables. | `docker run -e MYSQL_ROOT_PASSWORD=1234 mysql` |
| `-p` | Map ports between host and container. | `docker run -p 8080:80 nginx` |
| `-v` | Mount a volume. | `docker run -v /mydata:/data ubuntu` |
| `--network` | Connect container to a specific network. | `docker run --network my-net alpine` |

---

### 4. Example: Running a Container with Multiple Flag
docker run -d --rm --name my-nginx \
  -p 8080:80 \
  -e NGINX_PORT=80 \
  --network my-net \
  nginx

**Explanation:**
- `-d` â†’ Runs in the background.
- `--rm` â†’ Auto-removes the container after stopping.
- `--name my-nginx` â†’ Assigns the name `my-nginx`.
- `-p 8080:80` â†’ Maps port `8080` on the host to `80` inside the container.
- `-e NGINX_PORT=80` â†’ Sets an environment variable.
- `--network my-net` â†’ Connects to the `my-net` network.

---

## Docker Bridge Network Examples

### 1. Default Bridge Network
By default, Docker assigns containers to the `bridge` network. However, these containers **cannot communicate** with each other using their names.

#### Example: Running Containers in Default Bridge Network
# Run two containers without a custom network
docker run -d --name container1 busybox sleep 1000
docker run -d --name container2 busybox sleep 1000

Now, try to ping `container2` from `container1`:
docker exec -it container1 ping container2

ðŸ”´ **This will fail** because the default `bridge` network **does not support container name resolution**. 
We need to use ip address of container like http://172.50.10.2:8080 to make request to other container from one conatainer.
To solve this we use custom bridge network, we connect all services to this and cumminicate ustom bridge network only using their name

---

### 2. Creating a Custom Bridge Network
A **custom bridge network** allows containers to communicate using their names.

#### Example: Setting Up a Custom Bridge Network
# Create a custom bridge network
docker network create my-bridge-net

# Run two containers in the same network
docker run -d --name container1 --network my-bridge-net -p 8080:8080 node-backend
docker run -d --name container2 --network my-bridge-net -p 8081:8080 node-backend

Now we can use name to communicate between them

Now, try to ping `container2` from `container1`:
docker exec -it container1 sh
curl http://container2:8080/api/v1

Now, try to ping `container1` from `container2`:
docker exec -it container2 sh
curl http://container1:8080/api/v1

âœ… **This will work** because `my-bridge-net` enables name-based communication.

---

### 3. Inspecting a Bridge Network
To see details of your custom bridge network:
docker network inspect my-bridge-net

This shows connected containers and network configurations.

---

### 4. Connecting an Existing Container to a Bridge Network
If a container is already running, you can attach it to a custom bridge network:
docker network connect my-bridge-net container1


---

### 5. Disconnecting a Container from a Network
docker network disconnect my-bridge-net container1


---

### 6. Removing a Custom Bridge Network
First, stop any connected containers:
docker stop container1 container2
docker rm container1 container2

Then, remove the network:
docker network rm my-bridge-net


---

This setup ensures containers within the same **custom bridge network** can communicate using their **names**, improving flexibility and isolation.